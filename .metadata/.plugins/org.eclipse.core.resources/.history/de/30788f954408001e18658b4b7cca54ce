package com.infy.service;

import java.util.Random;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.infy.binding.LoginForm;
import com.infy.binding.UnlockForm;
import com.infy.binding.UserForm;
import com.infy.entity.UserMaster;
import com.infy.repository.CountryRepository;
import com.infy.repository.StateRepository;
import com.infy.repository.UserRepository;

@Service
public class UserManagementServiceImpl implements IUserManagementService {

	// This methods is check mail is unique or duplicate

	@Autowired
	private UserRepository userRepo;

	@Autowired
	private CountryRepository countryRepo;

	@Autowired
	private StateRepository stateRepo;

	@Override
	public String emailCheck(String email) {

		UserMaster findByEmail = userRepo.findByEmail(email);

		if (findByEmail == null) {
			return "the email is UNIQUE";
		}

		return "the email is DUPLICATE";
	}

	/*
	 * @Override public Map<Integer, String> loadCountys() {
	 * 
	 * List<CountyMaster> countrys = countryRepo.findAll();
	 * 
	 * Map<Integer, String> countymap = new HashMap<>();
	 * 
	 * countrys.forEach(country -> { countymap.put(country.getCountryId(),
	 * country.getCountryName()); });
	 * 
	 * return countymap; }
	 * 
	 * @Override public Map<Integer, String> loadStates(Integer countryId) {
	 * 
	 * List<StateMaster> states = stateRepo.findbyStateId(countryId);
	 * 
	 * Map<Integer, String> stateMap = new HashMap<>();
	 * 
	 * states.forEach(state -> { stateMap.put(state.getStateId(),
	 * state.getStateName()); });
	 * 
	 * return stateMap; }
	 * 
	 * @Override public Map<Integer, String> loadCitys(Integer StateId) {
	 * 
	 * List<CityMaster> citys = cityrepo.findByStateId(StateId);
	 * 
	 * Map<Integer, String> cityMap = new HashMap<>();
	 * 
	 * citys.forEach(city -> { cityMap.put(city.getCityId(), city.getCityname());
	 * });
	 * 
	 * return cityMap; }
	 */
	@Override
	public String registerUser(UserForm form) {

		UserMaster entity = new UserMaster();

		BeanUtils.copyProperties(form, entity);

		// set account status
		entity.setActivStatus("LOCKED");

		// set random password
		entity.setUserPwd(generateRandompwd());

		UserMaster save = userRepo.save(entity);

		if (save != null) {
			return "register user successfully";
		}

		return "register user not successfully";
	}

	@Override
	public String Login(LoginForm form) {
		UserMaster user = userRepo.findByEmailAndUserPwd(form.getEmail(), form.getPwd());

		System.out.println(user);

		if (user == null) {
			return "Invalid detils";
		}

		if (user.getActivStatus().equalsIgnoreCase("LOCKED")) {
			return "Account is Locked";
		}

		return "success";
	}

	@Override
	public String unLockAccount(UnlockForm form) {

		String email = form.getEmail();

		UserMaster user = userRepo.findByEmail(email);

		if (user.getUserPwd().equalsIgnoreCase(form.getTempwd())) {
			user.setUserPwd(form.getNewPwd());
			user.setActivStatus("UN-LOCKED");
			userRepo.save(user);
			return "Account un-Locked";

		}

		return "Account un-Locked";
	}

	private String generateRandompwd() {

		String text = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890abcdefghijklmnopqrsuvwxyz";

		StringBuilder sb = new StringBuilder();

		Random random = new Random();

		for (int i = 0; i < 6; i++) {

			int index = random.nextInt(text.length());
			sb.append(text.charAt(index));

		}
		return sb.toString();
	}

}
