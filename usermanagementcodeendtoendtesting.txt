UsermanageMentProject:
=====================

EntityClasses:
=============

@Entity
@Table(name = "USER_MASTER")
public class UserMaster {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer uid;

	private String fname;

	private String lname;

	private String email;

	private long phNumber;

	private String gender;

	private Integer countryId;

	private Integer stateId;

	private Integer cityId;

	private String userPwd;

	private String activStatus;
}

@Entity
@Table(name = "CONTRY_MASTER")
public class CountyMaster {

	@Id
	private Integer countryId;

	private String countryName;
}

@Entity
@Table(name = "STATE_MASTER")
public class StateMaster {

	@Id
	private Integer stateId;

	private String stateName;

	private Integer countryId;
}

@Entity
@Table(name = "CITY_MASTER")
public class CityMaster {

	@Id
	private Integer cityId;

	private String cityname;

	private Integer stateId;
}





RepositoryClasess:
==================


public interface UserRepository extends JpaRepository<UserMaster, Serializable> {

	public UserMaster findByEmail(String email);
	
	public UserMaster findByEmailAndUserPwd(String email,String pwd);
}


public interface CountryRepository extends JpaRepository<CountyMaster, Serializable> {

}

public interface StateRepository extends JpaRepository<StateMaster, Serializable> {

	//public List<StateMaster> findbyStateId(Integer countryid);

}

public interface CityRepository extends JpaRepository<CityMaster, Serializable> {

	//public List<CityMaster> findByStateId(Integer stateId);

}


SERVICESCLASSESS:
================

public interface IUserManagementService {

	public String emailCheck(String email);

	public Map<Integer, String> loadCountys();

	// public Map<Integer, String> loadStates(Integer countryId);

	// public Map<Integer, String> loadCitys(Integer StateId);

	public String registerUser(UserForm form);

	public String Login(LoginForm form);

	public String unLockAccount(UnlockForm form);

}




@Service
public class UserManagementServiceImpl implements IUserManagementService {

	// This methods is check mail is unique or duplicate

	@Autowired
	private UserRepository userRepo;

	@Autowired
	private CountryRepository countryRepo;

	@Autowired
	private StateRepository stateRepo;

	@Override
	public String emailCheck(String email) {

		UserMaster findByEmail = userRepo.findByEmail(email);

		if (findByEmail == null) {
			return "the email is UNIQUE";
		}

		return "the email is DUPLICATE";
	}
        @Override
	public String registerUser(UserForm form) {

		UserMaster entity = new UserMaster();

		BeanUtils.copyProperties(form, entity);

		// set account status
		entity.setActivStatus("LOCKED");

		// set random password
		entity.setUserPwd(generateRandompwd());

		UserMaster save = userRepo.save(entity);

		if (save != null) {
			return "register user successfully";
		}

		return "register user not successfully";
	}

	@Override
	public String Login(LoginForm form) {
		UserMaster user = userRepo.findByEmailAndUserPwd(form.getEmail(), form.getPwd());

		System.out.println(user);

		if (user == null) {
			return "Invalid detils";
		}

		if (user.getActivStatus().equalsIgnoreCase("LOCKED")) {
			return "Account is Locked";
		}

		return "success";
	}

	@Override
	public String unLockAccount(UnlockForm form) {

		String email = form.getEmail();

		UserMaster user = userRepo.findByEmail(email);

		if (user.getUserPwd().equalsIgnoreCase(form.getTempwd())) {
			user.setUserPwd(form.getNewPwd());
			user.setActivStatus("UN-LOCKED");
			userRepo.save(user);
			return "Account un-Locked";

		}

		return "Invalid temppassword";
	}

	private String generateRandompwd() {

		String text = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890abcdefghijklmnopqrsuvwxyz";

		StringBuilder sb = new StringBuilder();

		Random random = new Random();

		for (int i = 0; i < 6; i++) {

			int index = random.nextInt(text.length());
			sb.append(text.charAt(index));

		}
		return sb.toString();
	}

	@Override
	public Map<Integer, String> loadCountys() {

		List<CountyMaster> countrys = countryRepo.findAll();

		Map<Integer, String> countymap = new HashMap<>();

		countrys.forEach(country -> {
			countymap.put(country.getCountryId(), country.getCountryName());
		});

		return countymap;
	}

}


ControllerClassess:
===================


@RestController
@RequestMapping("/api")
public class UserManagementController {

	@Autowired
	private UserManagementServiceImpl service;

	@PostMapping("/saveuser")
	public ResponseEntity<String> saveuser(@RequestBody UserForm form) {
		String registerUser = service.registerUser(form);
		return new ResponseEntity<String>(registerUser, HttpStatus.CREATED);

	}

	@GetMapping("/emailcheck/{email}")
	public ResponseEntity<String> emailCheck(@PathVariable String email) {
		String emailCheck = service.emailCheck(email);
		return new ResponseEntity<String>(emailCheck, HttpStatus.OK);
	}

	@PostMapping("/login")
	public ResponseEntity<String> login(@RequestBody LoginForm form) {
		String login = service.Login(form);
		return new ResponseEntity<String>(login, HttpStatus.OK);

	}

	@PostMapping("/un-lockaccount")
	public ResponseEntity<String> unlockAccount(@RequestBody UnlockForm form) {
		String login = service.unLockAccount(form);
		return new ResponseEntity<String>(login, HttpStatus.OK);

	}

	@GetMapping("/loadcountry")
	public Map<Integer, String> LoadCountrys() {
		return service.loadCountys();
	}

}


BINDINGCLASSESS:
===============

public class UserForm {

	private String fname;

	private String lname;

	private String email;

	private long phNumber;

	private String gender;

	private Integer countryId;

	private Integer stateId;

	private Integer cityId;
}

public class UnlockForm {

	private String email;

	private String tempwd;

	private String newPwd;

	private String confirmPwd;
}

public class LoginForm {

	private String email;

	private String pwd;
}



Application.properties:
======================

spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/restapi
spring.datasource.username=root
spring.datasource.password=password
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.show-sql: true


TESTINGPOSTMAN:
===============


POST:  http://localhost:8080/api/saveuser
{
    "fname": "Koraboina",
    "lname": "Thanvika",
    "email": "raju@gmai.com",
    "phNumber": 7382734980,
    "gender": "Male",
    "countryId": 3,
    "stateId": 4,
    "cityId": 9
}

post: http://localhost:8080/api/login
{
    "email": "Raju@gmai.com",
    "pwd":"BPInD9"
    
}

post: http://localhost:8080/api/un-lockaccount

{
    "email": "raju@gmai.com",
    "tempwd": "BPInD9",
    "newPwd": "Raju",
    "confirmPwd": "Raju"
}


get: http://localhost:8080/api/emailcheck/koraboina@gmai.com


get: http://localhost:8080/api/loadcountry
